// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package coordservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoordsServiceClient is the client API for CoordsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordsServiceClient interface {
	WriteCoords(ctx context.Context, in *WriteCoordsReq, opts ...grpc.CallOption) (*WriteCoordsResp, error)
	GetCoords(ctx context.Context, in *Units, opts ...grpc.CallOption) (CoordsService_GetCoordsClient, error)
	UpdateUnits(ctx context.Context, in *UpdateUnitsReq, opts ...grpc.CallOption) (*UpdateUnitsResp, error)
	SweepingUp(ctx context.Context, in *OpeataionOn, opts ...grpc.CallOption) (*Empty, error)
	ReagentTreatment(ctx context.Context, in *OpeataionOn, opts ...grpc.CallOption) (*Empty, error)
	ShaftFormation(ctx context.Context, in *OpeataionOn, opts ...grpc.CallOption) (*Empty, error)
	MoveSnowToTemp(ctx context.Context, in *OperationFromTo, opts ...grpc.CallOption) (*Empty, error)
	LoadingSnowFromTemp(ctx context.Context, in *OpeataionOn, opts ...grpc.CallOption) (*Empty, error)
	ExportSnowFromTemp(ctx context.Context, in *OperationFromTo, opts ...grpc.CallOption) (*Empty, error)
	ClearTemp(ctx context.Context, in *OpeataionOn, opts ...grpc.CallOption) (*Empty, error)
	ListenCommands(ctx context.Context, in *Unit, opts ...grpc.CallOption) (CoordsService_ListenCommandsClient, error)
	InitApp(ctx context.Context, in *InitReq, opts ...grpc.CallOption) (*ID, error)
	OpenTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error)
	GetTask(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Tasks, error)
}

type coordsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordsServiceClient(cc grpc.ClientConnInterface) CoordsServiceClient {
	return &coordsServiceClient{cc}
}

func (c *coordsServiceClient) WriteCoords(ctx context.Context, in *WriteCoordsReq, opts ...grpc.CallOption) (*WriteCoordsResp, error) {
	out := new(WriteCoordsResp)
	err := c.cc.Invoke(ctx, "/CoordsService/WriteCoords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordsServiceClient) GetCoords(ctx context.Context, in *Units, opts ...grpc.CallOption) (CoordsService_GetCoordsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CoordsService_ServiceDesc.Streams[0], "/CoordsService/GetCoords", opts...)
	if err != nil {
		return nil, err
	}
	x := &coordsServiceGetCoordsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoordsService_GetCoordsClient interface {
	Recv() (*GetCoordsResp, error)
	grpc.ClientStream
}

type coordsServiceGetCoordsClient struct {
	grpc.ClientStream
}

func (x *coordsServiceGetCoordsClient) Recv() (*GetCoordsResp, error) {
	m := new(GetCoordsResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coordsServiceClient) UpdateUnits(ctx context.Context, in *UpdateUnitsReq, opts ...grpc.CallOption) (*UpdateUnitsResp, error) {
	out := new(UpdateUnitsResp)
	err := c.cc.Invoke(ctx, "/CoordsService/UpdateUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordsServiceClient) SweepingUp(ctx context.Context, in *OpeataionOn, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CoordsService/SweepingUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordsServiceClient) ReagentTreatment(ctx context.Context, in *OpeataionOn, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CoordsService/ReagentTreatment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordsServiceClient) ShaftFormation(ctx context.Context, in *OpeataionOn, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CoordsService/ShaftFormation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordsServiceClient) MoveSnowToTemp(ctx context.Context, in *OperationFromTo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CoordsService/MoveSnowToTemp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordsServiceClient) LoadingSnowFromTemp(ctx context.Context, in *OpeataionOn, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CoordsService/LoadingSnowFromTemp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordsServiceClient) ExportSnowFromTemp(ctx context.Context, in *OperationFromTo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CoordsService/ExportSnowFromTemp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordsServiceClient) ClearTemp(ctx context.Context, in *OpeataionOn, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CoordsService/ClearTemp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordsServiceClient) ListenCommands(ctx context.Context, in *Unit, opts ...grpc.CallOption) (CoordsService_ListenCommandsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CoordsService_ServiceDesc.Streams[1], "/CoordsService/ListenCommands", opts...)
	if err != nil {
		return nil, err
	}
	x := &coordsServiceListenCommandsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoordsService_ListenCommandsClient interface {
	Recv() (*Operaions, error)
	grpc.ClientStream
}

type coordsServiceListenCommandsClient struct {
	grpc.ClientStream
}

func (x *coordsServiceListenCommandsClient) Recv() (*Operaions, error) {
	m := new(Operaions)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coordsServiceClient) InitApp(ctx context.Context, in *InitReq, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/CoordsService/InitApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordsServiceClient) OpenTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/CoordsService/OpenTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordsServiceClient) GetTask(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Tasks, error) {
	out := new(Tasks)
	err := c.cc.Invoke(ctx, "/CoordsService/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordsServiceServer is the server API for CoordsService service.
// All implementations must embed UnimplementedCoordsServiceServer
// for forward compatibility
type CoordsServiceServer interface {
	WriteCoords(context.Context, *WriteCoordsReq) (*WriteCoordsResp, error)
	GetCoords(*Units, CoordsService_GetCoordsServer) error
	UpdateUnits(context.Context, *UpdateUnitsReq) (*UpdateUnitsResp, error)
	SweepingUp(context.Context, *OpeataionOn) (*Empty, error)
	ReagentTreatment(context.Context, *OpeataionOn) (*Empty, error)
	ShaftFormation(context.Context, *OpeataionOn) (*Empty, error)
	MoveSnowToTemp(context.Context, *OperationFromTo) (*Empty, error)
	LoadingSnowFromTemp(context.Context, *OpeataionOn) (*Empty, error)
	ExportSnowFromTemp(context.Context, *OperationFromTo) (*Empty, error)
	ClearTemp(context.Context, *OpeataionOn) (*Empty, error)
	ListenCommands(*Unit, CoordsService_ListenCommandsServer) error
	InitApp(context.Context, *InitReq) (*ID, error)
	OpenTask(context.Context, *Task) (*Empty, error)
	GetTask(context.Context, *Empty) (*Tasks, error)
	mustEmbedUnimplementedCoordsServiceServer()
}

// UnimplementedCoordsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCoordsServiceServer struct {
}

func (UnimplementedCoordsServiceServer) WriteCoords(context.Context, *WriteCoordsReq) (*WriteCoordsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteCoords not implemented")
}
func (UnimplementedCoordsServiceServer) GetCoords(*Units, CoordsService_GetCoordsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCoords not implemented")
}
func (UnimplementedCoordsServiceServer) UpdateUnits(context.Context, *UpdateUnitsReq) (*UpdateUnitsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUnits not implemented")
}
func (UnimplementedCoordsServiceServer) SweepingUp(context.Context, *OpeataionOn) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SweepingUp not implemented")
}
func (UnimplementedCoordsServiceServer) ReagentTreatment(context.Context, *OpeataionOn) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReagentTreatment not implemented")
}
func (UnimplementedCoordsServiceServer) ShaftFormation(context.Context, *OpeataionOn) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShaftFormation not implemented")
}
func (UnimplementedCoordsServiceServer) MoveSnowToTemp(context.Context, *OperationFromTo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveSnowToTemp not implemented")
}
func (UnimplementedCoordsServiceServer) LoadingSnowFromTemp(context.Context, *OpeataionOn) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadingSnowFromTemp not implemented")
}
func (UnimplementedCoordsServiceServer) ExportSnowFromTemp(context.Context, *OperationFromTo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSnowFromTemp not implemented")
}
func (UnimplementedCoordsServiceServer) ClearTemp(context.Context, *OpeataionOn) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearTemp not implemented")
}
func (UnimplementedCoordsServiceServer) ListenCommands(*Unit, CoordsService_ListenCommandsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenCommands not implemented")
}
func (UnimplementedCoordsServiceServer) InitApp(context.Context, *InitReq) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitApp not implemented")
}
func (UnimplementedCoordsServiceServer) OpenTask(context.Context, *Task) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenTask not implemented")
}
func (UnimplementedCoordsServiceServer) GetTask(context.Context, *Empty) (*Tasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedCoordsServiceServer) mustEmbedUnimplementedCoordsServiceServer() {}

// UnsafeCoordsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordsServiceServer will
// result in compilation errors.
type UnsafeCoordsServiceServer interface {
	mustEmbedUnimplementedCoordsServiceServer()
}

func RegisterCoordsServiceServer(s grpc.ServiceRegistrar, srv CoordsServiceServer) {
	s.RegisterService(&CoordsService_ServiceDesc, srv)
}

func _CoordsService_WriteCoords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteCoordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordsServiceServer).WriteCoords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoordsService/WriteCoords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordsServiceServer).WriteCoords(ctx, req.(*WriteCoordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordsService_GetCoords_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Units)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoordsServiceServer).GetCoords(m, &coordsServiceGetCoordsServer{stream})
}

type CoordsService_GetCoordsServer interface {
	Send(*GetCoordsResp) error
	grpc.ServerStream
}

type coordsServiceGetCoordsServer struct {
	grpc.ServerStream
}

func (x *coordsServiceGetCoordsServer) Send(m *GetCoordsResp) error {
	return x.ServerStream.SendMsg(m)
}

func _CoordsService_UpdateUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUnitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordsServiceServer).UpdateUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoordsService/UpdateUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordsServiceServer).UpdateUnits(ctx, req.(*UpdateUnitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordsService_SweepingUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpeataionOn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordsServiceServer).SweepingUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoordsService/SweepingUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordsServiceServer).SweepingUp(ctx, req.(*OpeataionOn))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordsService_ReagentTreatment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpeataionOn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordsServiceServer).ReagentTreatment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoordsService/ReagentTreatment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordsServiceServer).ReagentTreatment(ctx, req.(*OpeataionOn))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordsService_ShaftFormation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpeataionOn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordsServiceServer).ShaftFormation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoordsService/ShaftFormation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordsServiceServer).ShaftFormation(ctx, req.(*OpeataionOn))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordsService_MoveSnowToTemp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationFromTo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordsServiceServer).MoveSnowToTemp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoordsService/MoveSnowToTemp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordsServiceServer).MoveSnowToTemp(ctx, req.(*OperationFromTo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordsService_LoadingSnowFromTemp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpeataionOn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordsServiceServer).LoadingSnowFromTemp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoordsService/LoadingSnowFromTemp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordsServiceServer).LoadingSnowFromTemp(ctx, req.(*OpeataionOn))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordsService_ExportSnowFromTemp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationFromTo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordsServiceServer).ExportSnowFromTemp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoordsService/ExportSnowFromTemp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordsServiceServer).ExportSnowFromTemp(ctx, req.(*OperationFromTo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordsService_ClearTemp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpeataionOn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordsServiceServer).ClearTemp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoordsService/ClearTemp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordsServiceServer).ClearTemp(ctx, req.(*OpeataionOn))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordsService_ListenCommands_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Unit)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoordsServiceServer).ListenCommands(m, &coordsServiceListenCommandsServer{stream})
}

type CoordsService_ListenCommandsServer interface {
	Send(*Operaions) error
	grpc.ServerStream
}

type coordsServiceListenCommandsServer struct {
	grpc.ServerStream
}

func (x *coordsServiceListenCommandsServer) Send(m *Operaions) error {
	return x.ServerStream.SendMsg(m)
}

func _CoordsService_InitApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordsServiceServer).InitApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoordsService/InitApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordsServiceServer).InitApp(ctx, req.(*InitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordsService_OpenTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordsServiceServer).OpenTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoordsService/OpenTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordsServiceServer).OpenTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordsService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordsServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoordsService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordsServiceServer).GetTask(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CoordsService_ServiceDesc is the grpc.ServiceDesc for CoordsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoordsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CoordsService",
	HandlerType: (*CoordsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteCoords",
			Handler:    _CoordsService_WriteCoords_Handler,
		},
		{
			MethodName: "UpdateUnits",
			Handler:    _CoordsService_UpdateUnits_Handler,
		},
		{
			MethodName: "SweepingUp",
			Handler:    _CoordsService_SweepingUp_Handler,
		},
		{
			MethodName: "ReagentTreatment",
			Handler:    _CoordsService_ReagentTreatment_Handler,
		},
		{
			MethodName: "ShaftFormation",
			Handler:    _CoordsService_ShaftFormation_Handler,
		},
		{
			MethodName: "MoveSnowToTemp",
			Handler:    _CoordsService_MoveSnowToTemp_Handler,
		},
		{
			MethodName: "LoadingSnowFromTemp",
			Handler:    _CoordsService_LoadingSnowFromTemp_Handler,
		},
		{
			MethodName: "ExportSnowFromTemp",
			Handler:    _CoordsService_ExportSnowFromTemp_Handler,
		},
		{
			MethodName: "ClearTemp",
			Handler:    _CoordsService_ClearTemp_Handler,
		},
		{
			MethodName: "InitApp",
			Handler:    _CoordsService_InitApp_Handler,
		},
		{
			MethodName: "OpenTask",
			Handler:    _CoordsService_OpenTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _CoordsService_GetTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCoords",
			Handler:       _CoordsService_GetCoords_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenCommands",
			Handler:       _CoordsService_ListenCommands_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/protos/coordservice/coordservice.proto",
}
